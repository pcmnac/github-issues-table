export const data = [
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13459",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13459/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13459/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13459/events",
      "html_url": "https://github.com/facebook/react/issues/13459",
      "id": 352938250,
      "node_id": "MDU6SXNzdWUzNTI5MzgyNTA=",
      "number": 13459,
      "title": "React onChange events not bubbling up on unmount",
      "user": {
        "login": "jpkempf",
        "id": 5022212,
        "node_id": "MDQ6VXNlcjUwMjIyMTI=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/5022212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jpkempf",
        "html_url": "https://github.com/jpkempf",
        "followers_url": "https://api.github.com/users/jpkempf/followers",
        "following_url": "https://api.github.com/users/jpkempf/following{/other_user}",
        "gists_url": "https://api.github.com/users/jpkempf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jpkempf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jpkempf/subscriptions",
        "organizations_url": "https://api.github.com/users/jpkempf/orgs",
        "repos_url": "https://api.github.com/users/jpkempf/repos",
        "events_url": "https://api.github.com/users/jpkempf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jpkempf/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-08-22T12:46:16Z",
      "updated_at": "2018-08-22T14:40:50Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI'm reporting a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen attaching an `onChange` handler to a JSX element, if calling this handler leads to the element being unmounted, then the `onChange` event never bubbles up in the DOM. This means you can't listen to it on the `document`, or basically on anything else than the element itself.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nExample code here: https://codesandbox.io/s/moop85pvo9\r\nTry it out here: https://moop85pvo9.codesandbox.io \r\n\r\nOpen the console and click around a bit. You will notice that the single checkbox that never changes it's position triggers both `onClick` and `onChange` listeners whereas the other checkboxes that get moved between lists only trigger `onClick` events.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect the `onChange` event to be handled in the same way as the `onClick` event.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested under these conditions:\r\n- React 16.3.x and 16.4.x.\r\n- MacOS 10.13.6\r\n- Opera 54, Firefox Dev Edition 62, Chrome Canary 70\r\n\r\nBehaviour has not changed between versions."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13457",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13457/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13457/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13457/events",
      "html_url": "https://github.com/facebook/react/pull/13457",
      "id": 352793406,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjEwMDEzMTU4",
      "number": 13457,
      "title": "ShallowRenderer should always call the callback of setState",
      "user": {
        "login": "koba04",
        "id": 250407,
        "node_id": "MDQ6VXNlcjI1MDQwNw==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/250407?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/koba04",
        "html_url": "https://github.com/koba04",
        "followers_url": "https://api.github.com/users/koba04/followers",
        "following_url": "https://api.github.com/users/koba04/following{/other_user}",
        "gists_url": "https://api.github.com/users/koba04/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/koba04/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/koba04/subscriptions",
        "organizations_url": "https://api.github.com/users/koba04/orgs",
        "repos_url": "https://api.github.com/users/koba04/repos",
        "events_url": "https://api.github.com/users/koba04/events{/privacy}",
        "received_events_url": "https://api.github.com/users/koba04/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-08-22T03:48:03Z",
      "updated_at": "2018-08-22T03:48:10Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13457",
        "html_url": "https://github.com/facebook/react/pull/13457",
        "diff_url": "https://github.com/facebook/react/pull/13457.diff",
        "patch_url": "https://github.com/facebook/react/pull/13457.patch"
      },
      "body": "Currently, ShallowRenderer doesn't call a callback of `setState`'s 2nd arguments when the `setState` returns `null` or `undefined`. `react-dom` always calls the callback regardless the result of `setState`.\r\nThis PR fixes the inconsistency."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13456",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13456/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13456/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13456/events",
      "html_url": "https://github.com/facebook/react/issues/13456",
      "id": 352775249,
      "node_id": "MDU6SXNzdWUzNTI3NzUyNDk=",
      "number": 13456,
      "title": "Potential performance issues with using forwardRef",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2018-08-22T02:12:09Z",
      "updated_at": "2018-08-22T13:08:20Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (assuming that a potential drop in perf counts as a \"bug\")\r\n\r\n**What is the current behavior?**\r\n\r\nI've been setting up a rudimentary perf benchmark harness for React-Redux over in https://github.com/reduxjs/react-redux/issues/983 , so that we can compare performance between builds of React-Redux as we work on version 6.  The harness runs one or more benchmark apps in headless Puppeteer, running them once to capture FPS values and a second time to capture Chrome trace reports automatically.\r\n\r\nCurrently, there's only one benchmark app: a \"stock ticker\"-type stress test that measures FPS by using the `fps-emitter` package (which relies on `requestAnimationFrame`).  It's rough, but it does show meaningful differences in FPS values as we swap between different React-Redux builds and change the number of connected components in the benchmark.\r\n\r\nWe have two WIP candidate PRs for React-Redux v6: https://github.com/reduxjs/react-redux/pull/995 and https://github.com/reduxjs/react-redux/pull/1000 .  Initial testing showed that PR 995 was almost as fast as our existing 5.0.7 version, while PR 995 was slower in some runs.  However, my initial push of the 995 branch did not include use of `React.forwardRef`, while the 1000 branch already had that added.\r\n\r\nI spent Saturday adding `forwardRef` and a couple other pieces of functionality to the 995 branch, then re-ran the benchmarks.  Per ourcomments in the 983 issue, we saw that the 995 branch had suddenly gotten slower, and that removing `forwardRef` from the 1000 branch sped things up by a few FPS.\r\n\r\nThis is admittedly a very artificial stress test scenario, but it's also likely that React-Redux apps can have hundreds or thousands of connected components at once, so the potential slowdown seems concerning.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThe current perf benchmark repo is at https://github.com/markerikson/benchmark-react-redux-perf .  It uses UMD builds of React-Redux so that it can easily switch which build is being used.  Several UMD builds are already committed there in the root of the repo.  `6.0-mark` is the 995 branch, and `6.0-greg` is the 1000 branch.  They can be reproduced by building their respective branches from the PRs.  I've been hand-copying the UMD build artifact from my React-Redux clone over to this benchmark folder and renaming it to whatever seems appropriate.\r\n\r\nClone the repo, `yarn` to install, `yarn perf` to build and run the benchmark.  Number of connected components can be modified in `src/constants.js` (requires rebuilding).  The harness determines which UMD build versions to run based on an array in `perfBenchmark.js`, around line 11 (`const VERSIONS = [\"5.0.7\", \"6.0-mark\"]`).\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nThat there would be minimal to no impact in perf when `forwardRef` is used to wrap a component such as a HOC, and that HOC is used widely in an application.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI've been testing this with Puppeteer 1.6.2, on Windows 10.  It looks like the locally installed version of Chromium is 69.0.3494.0 .\r\n\r\nCurrent version of React is 16.4.2, UMD build (as React-Redux UMD expects that both React and Redux are also global variables).  I have not tested against a prior version of React, as we are specifically targeting 16.4+ with this next version of React-Redux."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13455",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13455/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13455/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13455/events",
      "html_url": "https://github.com/facebook/react/issues/13455",
      "id": 352771749,
      "node_id": "MDU6SXNzdWUzNTI3NzE3NDk=",
      "number": 13455,
      "title": "forwardRef precludes use of composite component test utils methods",
      "user": {
        "login": "noahgrant",
        "id": 1355779,
        "node_id": "MDQ6VXNlcjEzNTU3Nzk=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1355779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/noahgrant",
        "html_url": "https://github.com/noahgrant",
        "followers_url": "https://api.github.com/users/noahgrant/followers",
        "following_url": "https://api.github.com/users/noahgrant/following{/other_user}",
        "gists_url": "https://api.github.com/users/noahgrant/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/noahgrant/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/noahgrant/subscriptions",
        "organizations_url": "https://api.github.com/users/noahgrant/orgs",
        "repos_url": "https://api.github.com/users/noahgrant/repos",
        "events_url": "https://api.github.com/users/noahgrant/events{/privacy}",
        "received_events_url": "https://api.github.com/users/noahgrant/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 139734344,
          "node_id": "MDU6TGFiZWwxMzk3MzQzNDQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
          "name": "Component: Test Utils",
          "color": "eb6420",
          "default": false
        },
        {
          "id": 40929153,
          "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
          "name": "Type: Enhancement",
          "color": "84b6eb",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-08-22T01:54:16Z",
      "updated_at": "2018-08-22T14:41:01Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug, I believe—requested to file a new issue per https://github.com/facebook/react/issues/12453#issuecomment-414868619\r\n\r\n**What is the current behavior?**\r\nWhen using ReactTestUtils that navigate the trees for composite components, I am unable to find instances of components wrapped in `React.forwardRef`:\r\n\r\n```jsx\r\nfindRenderedComponentWithType(tree, myHOCForwardedComponent)\r\n// error, finds 0 instances\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**\r\n\r\nJSFiddle link [here](https://jsfiddle.net/Luktwrdm/974/)\r\n\r\nI have a HOC that returns a forwardRef pretty much exactly like the one written up in the [docs](https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-in-higher-order-components), except while using React Context:\r\n\r\n```jsx\r\nconst MyContext = React.createContext(someDefault);\r\n\r\nconst withMyContext = (Component) => {\r\n  class MyContextConsumer extends React.Component {\r\n    render() {\r\n      const {forwardedRef, ...rest} = this.props;\r\n\r\n      return (\r\n        <MyContext.Consumer>\r\n          {(value) => (\r\n            <Component\r\n              {...rest}\r\n              ref={forwardedRef}\r\n              myValue={value}\r\n            />\r\n          )}\r\n        </MyContext.Consumer>\r\n      );\r\n    }\r\n  }\r\n\r\n  return React.forwardRef((props, ref) => (\r\n    <MyContextConsumer {...props} forwardedRef={ref} />\r\n  ));\r\n};\r\n\r\n@withMyContext\r\nclass MyHOCForwardedComponent extends React.Component {\r\n  render() {\r\n     return <div>HELLO</div>;\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nI would hope that we could still navigate the tree, such that\r\n```jsx\r\nfindRenderedComponentWithType(tree, myHOCForwardedComponent)\r\n```\r\n\r\nis able to find the rendered instance.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.4—affected everywhere, I believe.\r\n\r\nThank you for the time!!\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13453",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13453/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13453/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13453/events",
      "html_url": "https://github.com/facebook/react/pull/13453",
      "id": 352635358,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA5ODk4MDgx",
      "number": 13453,
      "title": "[Not for Merge] Investigate CI failures on Symbol/Function warning PR",
      "user": {
        "login": "nhunzaker",
        "id": 590904,
        "node_id": "MDQ6VXNlcjU5MDkwNA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nhunzaker",
        "html_url": "https://github.com/nhunzaker",
        "followers_url": "https://api.github.com/users/nhunzaker/followers",
        "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
        "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
        "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
        "repos_url": "https://api.github.com/users/nhunzaker/repos",
        "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-08-21T17:19:33Z",
      "updated_at": "2018-08-21T17:56:26Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13453",
        "html_url": "https://github.com/facebook/react/pull/13453",
        "diff_url": "https://github.com/facebook/react/pull/13453.diff",
        "patch_url": "https://github.com/facebook/react/pull/13453.patch"
      },
      "body": "https://github.com/facebook/react/pull/13394 fails CI due to a memory issue. I'm using this PR to slowly peal back the changes and see where the issue might be.\r\n\r\n- [ ] Hypothesis 1: The SSR Integration tests are heavy, adding the extra tests is the root of the issue\r\n\r\nHere goes..."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13450",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13450/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13450/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13450/events",
      "html_url": "https://github.com/facebook/react/issues/13450",
      "id": 352431414,
      "node_id": "MDU6SXNzdWUzNTI0MzE0MTQ=",
      "number": 13450,
      "title": "UMD builds are not enabled on UNPKG",
      "user": {
        "login": "nickmccurdy",
        "id": 927220,
        "node_id": "MDQ6VXNlcjkyNzIyMA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/927220?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nickmccurdy",
        "html_url": "https://github.com/nickmccurdy",
        "followers_url": "https://api.github.com/users/nickmccurdy/followers",
        "following_url": "https://api.github.com/users/nickmccurdy/following{/other_user}",
        "gists_url": "https://api.github.com/users/nickmccurdy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nickmccurdy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nickmccurdy/subscriptions",
        "organizations_url": "https://api.github.com/users/nickmccurdy/orgs",
        "repos_url": "https://api.github.com/users/nickmccurdy/repos",
        "events_url": "https://api.github.com/users/nickmccurdy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nickmccurdy/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2018-08-21T08:14:19Z",
      "updated_at": "2018-08-21T16:57:26Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Visiting https://unpkg.com/react displays the CJS build (https://unpkg.com/react@16.4.2/index.js) when the UMD build (https://unpkg.com/react@16.4.2/umd/react.development.js) should be displayed instead. I also noticed this issue with react-dom, so I assume all packages need to be fixed.\r\n\r\nPlease refer to the usage instructions at the bottom of https://unpkg.com/."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13447",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13447/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13447/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13447/events",
      "html_url": "https://github.com/facebook/react/issues/13447",
      "id": 352223467,
      "node_id": "MDU6SXNzdWUzNTIyMjM0Njc=",
      "number": 13447,
      "title": "tools for end-to-end testing",
      "user": {
        "login": "catdad",
        "id": 2205537,
        "node_id": "MDQ6VXNlcjIyMDU1Mzc=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/2205537?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/catdad",
        "html_url": "https://github.com/catdad",
        "followers_url": "https://api.github.com/users/catdad/followers",
        "following_url": "https://api.github.com/users/catdad/following{/other_user}",
        "gists_url": "https://api.github.com/users/catdad/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/catdad/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/catdad/subscriptions",
        "organizations_url": "https://api.github.com/users/catdad/orgs",
        "repos_url": "https://api.github.com/users/catdad/repos",
        "events_url": "https://api.github.com/users/catdad/events{/privacy}",
        "received_events_url": "https://api.github.com/users/catdad/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 40929155,
          "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
          "name": "Type: Question",
          "color": "cc317c",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2018-08-20T17:15:57Z",
      "updated_at": "2018-08-20T18:27:55Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "This may be a question moreso than a feature request, but I can't seem to find the answer around the web. It seems most people are working on small apps or just ignoring this as an issue.\r\n\r\nI am working on a large react application, and seeing some issues with end-to-end testing. We have a webdriverio/selenium setup which seems to be rather common from what I understand. We use these tools to click some buttons, type some text, etc., and then find the affected DOM elements and do some assertions.\r\n\r\nHowever, and here is where the problem is, React does not synchronously perform all operations on the read DOM. It will use various methods to schedule work, which will be done asynchronously at some later time. I have found that in our tests, a few assertions at random will see that the real DOM is still in the previous state (rather than the new state that results from having clicked the button and whatnot) in every large test run.\r\n\r\nI have not seen many posts on the internet even acknowledge this as an issue. The one that I found that does only suggests adding timeouts throughout the tests. However, for obvious reasons, this is slow and non-deterministic.\r\n\r\nIs there a suggested way to know that a React application has finished performing all scheduled work? And if not, is there a discussion about this happening somewhere?\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13442",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13442/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13442/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13442/events",
      "html_url": "https://github.com/facebook/react/pull/13442",
      "id": 352155993,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA5NTM2MzAw",
      "number": 13442,
      "title": "Update setInnerHTML.js",
      "user": {
        "login": "sunnibfgi",
        "id": 12179856,
        "node_id": "MDQ6VXNlcjEyMTc5ODU2",
        "avatar_url": "https://avatars2.githubusercontent.com/u/12179856?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sunnibfgi",
        "html_url": "https://github.com/sunnibfgi",
        "followers_url": "https://api.github.com/users/sunnibfgi/followers",
        "following_url": "https://api.github.com/users/sunnibfgi/following{/other_user}",
        "gists_url": "https://api.github.com/users/sunnibfgi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sunnibfgi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sunnibfgi/subscriptions",
        "organizations_url": "https://api.github.com/users/sunnibfgi/orgs",
        "repos_url": "https://api.github.com/users/sunnibfgi/repos",
        "events_url": "https://api.github.com/users/sunnibfgi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sunnibfgi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2018-08-20T14:17:51Z",
      "updated_at": "2018-08-22T15:24:05Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13442",
        "html_url": "https://github.com/facebook/react/pull/13442",
        "diff_url": "https://github.com/facebook/react/pull/13442.diff",
        "patch_url": "https://github.com/facebook/react/pull/13442.patch"
      },
      "body": "add type detection to anonymous function parameters\r\n\r\n**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13439",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13439/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13439/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13439/events",
      "html_url": "https://github.com/facebook/react/issues/13439",
      "id": 351917796,
      "node_id": "MDU6SXNzdWUzNTE5MTc3OTY=",
      "number": 13439,
      "title": "Cache Provider: Add hooks to read and preload in dev mode",
      "user": {
        "login": "dan-kez",
        "id": 6778796,
        "node_id": "MDQ6VXNlcjY3Nzg3OTY=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/6778796?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dan-kez",
        "html_url": "https://github.com/dan-kez",
        "followers_url": "https://api.github.com/users/dan-kez/followers",
        "following_url": "https://api.github.com/users/dan-kez/following{/other_user}",
        "gists_url": "https://api.github.com/users/dan-kez/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dan-kez/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dan-kez/subscriptions",
        "organizations_url": "https://api.github.com/users/dan-kez/orgs",
        "repos_url": "https://api.github.com/users/dan-kez/repos",
        "events_url": "https://api.github.com/users/dan-kez/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dan-kez/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-08-19T16:58:06Z",
      "updated_at": "2018-08-19T19:10:48Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "This topic originally came up in a `react-devtools` discussion: https://github.com/facebook/react-devtools/issues/1099#issuecomment-414138771.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nThe package `simple-cache-provider` does not presently provide hooks to understand when we've pulled a resource for the first time, hit the cache, or dropped something from the cache due to `MAX_SIZE`.\r\n\r\nDue to this, tools such as `react-devtools` cannot provide an interface around our cached resources which makes debugging / inspection harder.\r\n\r\n**What is the expected behavior?**\r\nIt would be great if there was a way to expose callbacks / events for when the cache resource has resolved. An idea would be to fire these callbacks / events in the existing switch statement in `read` / `preload` if we are in `__DEV__` mode.\r\n\r\nWith this information we could have a \"redux-devtools\"-esque interface to better understand where our data is coming from and when we're hitting the cache in dev mode.\r\n\r\nTools like this would also be useful to people new to the Suspend API to visually see their resources transition between the various record states.\r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13436",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13436/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13436/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13436/events",
      "html_url": "https://github.com/facebook/react/issues/13436",
      "id": 351848072,
      "node_id": "MDU6SXNzdWUzNTE4NDgwNzI=",
      "number": 13436,
      "title": "Suspense fixture/demo: page scrolls to top unnecessarily",
      "user": {
        "login": "sophiebits",
        "id": 6820,
        "node_id": "MDQ6VXNlcjY4MjA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sophiebits",
        "html_url": "https://github.com/sophiebits",
        "followers_url": "https://api.github.com/users/sophiebits/followers",
        "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
        "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
        "organizations_url": "https://api.github.com/users/sophiebits/orgs",
        "repos_url": "https://api.github.com/users/sophiebits/repos",
        "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sophiebits/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 725156255,
          "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
          "name": "good first issue (taken)",
          "color": "b60205",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-08-18T20:15:01Z",
      "updated_at": "2018-08-19T16:48:48Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "https://twitter.com/rauchg/status/1030613789425598464\r\n\r\nIf you open that demo (which lives in this repo’s fixtures folder) on a small screen, tapping one of the rows at the bottom (ex: my name) causes the page to scroll to the top immediately, which means you don’t see the inline loading indicator.\r\n\r\nIt should scroll to top after the data loads but not before."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13424",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13424/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13424/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13424/events",
      "html_url": "https://github.com/facebook/react/issues/13424",
      "id": 351662938,
      "node_id": "MDU6SXNzdWUzNTE2NjI5Mzg=",
      "number": 13424,
      "title": "onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-08-17T16:41:41Z",
      "updated_at": "2018-08-20T17:37:22Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "Extracting from https://github.com/facebook/react/issues/12643.\r\n\r\nThis issue has always been in React. I can reproduce it up to React 0.11. However **it's probably extremely rare in practice and isn't worth fixing**. I'm just filing this for posterity.\r\n\r\nHere is a minimal example.\r\n\r\n```js\r\nclass App extends React.Component {\r\n  state = {value: ''}\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\r\n      \"input\",\r\n      () => {\r\n        // COMMENT OUT THIS LINE TO FIX:\r\n        this.setState({});\r\n      },\r\n      true\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"container\"));\r\n```\r\n\r\nTyping doesn't work — unless I comment out that `setState` call in the capture phase listener.\r\n\r\nSay the input is empty and we're typing `a`.\r\n\r\nWhat happens here is that `setState({})` in the capture phase non-React listener runs first. When re-rendering due to that first empty `setState({})`, input props still contain the old value (`\"\"`) while the DOM node's value is new (`\"a\"`). They're not equal, so we'll set the DOM node value to `\"\"` (according to the props) and remember `\"\"` as the current value.\r\n\r\n<img width=\"549\" alt=\"screen shot 2018-08-17 at 1 08 42 am\" src=\"https://user-images.githubusercontent.com/810438/44241204-4b0e0880-a1ba-11e8-847d-bf9ca43eb954.png\">\r\n\r\nThen, `ChangeEventPlugin` tries to decide whether to emit a change event. It asks the tracker whether the value has changed. The tracker compares the presumably \"new\" `node.value` (it's `\"\"` — we've just set it earlier!) with the `lastValue` it has stored (also `\"\"` — and also just updated). No changes!\r\n\r\n<img width=\"505\" alt=\"screen shot 2018-08-17 at 1 10 59 am\" src=\"https://user-images.githubusercontent.com/810438/44241293-e0110180-a1ba-11e8-9c5a-b0d808f745cd.png\">\r\n\r\n\r\nOur `\"a\"` update is lost. We never get the change event, and never actually get a chance to set the correct state."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13420",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13420/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13420/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13420/events",
      "html_url": "https://github.com/facebook/react/pull/13420",
      "id": 351349584,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4OTY5NzM0",
      "number": 13420,
      "title": "[Not for Merge] Remove legacy context",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2018-08-16T20:05:56Z",
      "updated_at": "2018-08-18T02:05:54Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13420",
        "html_url": "https://github.com/facebook/react/pull/13420",
        "diff_url": "https://github.com/facebook/react/pull/13420.diff",
        "patch_url": "https://github.com/facebook/react/pull/13420.patch"
      },
      "body": "**This is not for merge or review.**\r\n\r\nI'm just curious how much supporting legacy context affects bundle size."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13413",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13413/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13413/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13413/events",
      "html_url": "https://github.com/facebook/react/issues/13413",
      "id": 351045644,
      "node_id": "MDU6SXNzdWUzNTEwNDU2NDQ=",
      "number": 13413,
      "title": "Umbrella: Chopping Block",
      "user": {
        "login": "sebmarkbage",
        "id": 63648,
        "node_id": "MDQ6VXNlcjYzNjQ4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sebmarkbage",
        "html_url": "https://github.com/sebmarkbage",
        "followers_url": "https://api.github.com/users/sebmarkbage/followers",
        "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
        "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
        "repos_url": "https://api.github.com/users/sebmarkbage/repos",
        "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710615342,
          "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
          "name": "Type: Umbrella",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-08-16T03:50:15Z",
      "updated_at": "2018-08-16T18:27:06Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "I wanted to create a list of things whose existence makes React bigger and more complicated than necessary. This makes them more likely to need to be deprecated and actually removed in a future version. No clue of when this will happen and what the recommended upgrade path will be so don't take this issue as advice that you should move away from them until there's clear upgrade advice. You might make it worse by doing so.\r\n\r\n(This has some overlap with https://github.com/facebook/react/issues/9475 but those seem more longer term.)\r\n\r\n- [ ] __Unsafe Life Cycles without UNSAFE prefix__ - We'll keep the ones prefixed UNSAFE indefinitely but the original ones will likely be deprecated and removed.\r\n\r\n- [ ] __Legacy context__ - `.contextTypes`, `.childContextTypes`, `getChildContext` - The old context is full of edge cases for when it is accidentally supposed to work and the way it is designed requires all React code to become slower just to support this feature.\r\n\r\n- [ ] __String refs__ - This requires current owner to be exposed at runtime. While it is likely that some form of owner will remain, this particular semantics is likely not what we want out of it. So rather than having two owners, we should just remove this feature. It also requires an extra field on every ReactElement which is otherwise not needed.\r\n\r\n- [ ] __Module pattern components__ - This is a little used feature that lets you return a class instance from a regular function without extending `React.Component`. This is not that useful. In practice the ecosystem has moved around ES class like usage, and other language compiling to JS tries to comply with that model as well. The existence of this feature means that we don't know that something is a functional component by just testing if it's a function that is not extending `React.Component`. Instead we have to do some extra feature testing for every functional component there is. It also prevents us from passing the ref as the second argument by default for all functional components without using `forwardRef` since that wouldn't be valid for class components.\r\n\r\n- [ ] __Uncontrolled onInput__ - This is described in #9657. Because we support uncontrolled polyfilling of this event, we have to do pretty invasive operations to the DOM like attaching setters. This is all in support of imperative usage of the DOM which should be out-of-scope for React.\r\n\r\n- [ ] __setState in componentDidCatch__ - Currently we support error recovery in `componentDidCatch` but once we support `getDerivedStateFromCatch` we might want to consider deprecating the old mechanism which automatically first commits null. The semantics of this are a bit weird and requires complicated code that we likely get wrong sometimes.\r\n\r\n- [ ] __Context Object As Consumer__ - Right now it is possible to use the Context object as a Consumer render prop. That's an artifact of reusing the same object allocation but not documented. We'll want to deprecate that and make it the Provider instead.\r\n\r\n- [ ] __No GC of not unmounted roots__ - This likely won't come with a warning. We'll just do it. It's not a breaking behavior other than memory usage. You have to call `unmountComponentAtNode` or that component won't be cleaned up. Almost always it is not cleaned up anyway since if you have at least one subscription that still holds onto it. Arguably this is not even a breaking change. #13293\r\n\r\n- [ ] __unstable_renderSubtreeIntoContainer__ - This is replaced by Portals. It is already problematic since it can't be used in life-cycles but it also add lots of special case code to transfer the context. Since legacy context itself likely will be deprecated, this serves no purposes.\r\n\r\n- [x] __ReactDOM.render with hydration__ - This has already been deprecated. This requires extra code and requires us to generate an extra attribute in the HTML to auto-select hydration. People should be using ReactDOM.hydrate instead. We just need to remove the old behavior and the attribute in ReactDOMServer."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13411",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13411/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13411/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13411/events",
      "html_url": "https://github.com/facebook/react/issues/13411",
      "id": 351025162,
      "node_id": "MDU6SXNzdWUzNTEwMjUxNjI=",
      "number": 13411,
      "title": "KeyboardEvent.repeat is not normalized",
      "user": {
        "login": "craigkovatch",
        "id": 10970257,
        "node_id": "MDQ6VXNlcjEwOTcwMjU3",
        "avatar_url": "https://avatars2.githubusercontent.com/u/10970257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigkovatch",
        "html_url": "https://github.com/craigkovatch",
        "followers_url": "https://api.github.com/users/craigkovatch/followers",
        "following_url": "https://api.github.com/users/craigkovatch/following{/other_user}",
        "gists_url": "https://api.github.com/users/craigkovatch/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/craigkovatch/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/craigkovatch/subscriptions",
        "organizations_url": "https://api.github.com/users/craigkovatch/orgs",
        "repos_url": "https://api.github.com/users/craigkovatch/repos",
        "events_url": "https://api.github.com/users/craigkovatch/events{/privacy}",
        "received_events_url": "https://api.github.com/users/craigkovatch/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2018-08-16T01:41:06Z",
      "updated_at": "2018-08-16T18:22:47Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nDocumentation of SyntheticEvent claims: \"React normalizes events so that they have consistent properties across different browsers.\" https://reactjs.org/docs/events.html#supported-events\r\n\r\nDocumentation of Keyboard Events lists `boolean repeat` as a supported field: https://reactjs.org/docs/events.html#keyboard-events\r\n\r\nIE11/Edge do not natively support `repeat`, but React does not normalize the event to set `repeat: true` when a keyDown event repeats (i.e. when a key is held down). (Edge has an open bug on this but of course IE11 is abandonware.)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nTab to to the only div in this repro and hold down a key:\r\nhttps://jsfiddle.net/acsr4ofu/\r\n\r\nBug: 'repeat!' alert does not appear in IE11\r\n\r\n**What is the expected behavior?**\r\nAn alert dialog showing 'repeat!' should appear in any browser that React supports.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nCurrent version of React, any browser which does not natively support `KeyboardEvent.repeat` but IE/Edge in particular (Chrome always supported; FF since 28; Safari since 10.1). Unknown if this worked in previous versions of React."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13409",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13409/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13409/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13409/events",
      "html_url": "https://github.com/facebook/react/pull/13409",
      "id": 350924364,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4NjQ5MTc4",
      "number": 13409,
      "title": "Demonstrate 16.x regression in legacy context",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-08-15T18:55:12Z",
      "updated_at": "2018-08-15T18:56:26Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13409",
        "html_url": "https://github.com/facebook/react/pull/13409",
        "diff_url": "https://github.com/facebook/react/pull/13409.diff",
        "patch_url": "https://github.com/facebook/react/pull/13409.patch"
      },
      "body": "This is a failing test from https://github.com/facebook/react/issues/11508.\r\n\r\nIt seems that 16.x unintentionally introduced over-rendering for legacy context in case where\r\n\r\n* a grandparent and a deep child are updated within the same batch\r\n* the grandparent is a legacy context provider\r\n* a component in the middle bails out in sCU\r\n\r\nIn React 15, children of the bailed out component wouldn't re-render in this case (except the grandchild that was actually updated).\r\n\r\nSince React 16, in this particular case **components that didn't bail out with sCU get re-rendered even if their parents _did_ bail out with sCU — as long as there's something yet deeper that was updated**.\r\n\r\n```\r\n<GrandChildThatWasUpdated> // <--- setState()\r\n  <SCUFalse>\r\n    <ThisRendersMoreOftenIn16> <--- this wouldn't re-render in 15\r\n      <ChildThatWasUpdated>  // <--- setState() in the same batch\r\n\r\n```\r\n\r\nThe problem occurs because we [disable sCU checks](https://github.com/facebook/react/blob/5816829170662eed09e9681ce387d5672fc3da31/packages/react-reconciler/src/ReactFiberBeginWork.js#L982) when a legacy context has changed above. We thought that we wouldn't recurse into children anyway (since sCU bailed out). But we forgot that we *could* recurse into children if they were independently scheduled for the same update.\r\n\r\nAt this point I feel like fixing it might break some cases that accidentally relied on over-rendering. I'm also not sure what the fix would be like. I suppose we'd need to [push `false` to this cursor](https://github.com/facebook/react/blob/5816829170662eed09e9681ce387d5672fc3da31/packages/react-reconciler/src/ReactFiberContext.js#L38) when we descend down a component with bailed-out sCU that still has some children scheduled, and pop it when we go up. Not sure it's worth the added complexity.\r\n\r\nOn the other hand, if this is keeping people from updating to 16, that puts them in a situation where they can't upgrade to a version with *new* context because the *old* context became too slow."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13407",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13407/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13407/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13407/events",
      "html_url": "https://github.com/facebook/react/pull/13407",
      "id": 350842651,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4NTg3OTQ3",
      "number": 13407,
      "title": "Deprecate undocumented ReactTestUtils.SimulateNative API",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2018-08-15T14:58:58Z",
      "updated_at": "2018-08-15T16:00:28Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13407",
        "html_url": "https://github.com/facebook/react/pull/13407",
        "diff_url": "https://github.com/facebook/react/pull/13407.diff",
        "patch_url": "https://github.com/facebook/react/pull/13407.patch"
      },
      "body": "Fixes https://github.com/facebook/react/issues/11656.\r\n\r\nThis API is counter-intuitive because it only simulates the *React dispatch* of a native event, as opposed to simulating what the *browser* would do on an event. I've seen quite a few people confused by this. It's also completely undocumented.\r\n\r\nI think it's a liability to keep this around."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13404",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13404/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13404/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13404/events",
      "html_url": "https://github.com/facebook/react/pull/13404",
      "id": 350760970,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4NTI3MDY1",
      "number": 13404,
      "title": "Warn when an empty string is passed to a DOM boolean prop",
      "user": {
        "login": "motiz88",
        "id": 2246565,
        "node_id": "MDQ6VXNlcjIyNDY1NjU=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/2246565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/motiz88",
        "html_url": "https://github.com/motiz88",
        "followers_url": "https://api.github.com/users/motiz88/followers",
        "following_url": "https://api.github.com/users/motiz88/following{/other_user}",
        "gists_url": "https://api.github.com/users/motiz88/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/motiz88/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/motiz88/subscriptions",
        "organizations_url": "https://api.github.com/users/motiz88/orgs",
        "repos_url": "https://api.github.com/users/motiz88/repos",
        "events_url": "https://api.github.com/users/motiz88/events{/privacy}",
        "received_events_url": "https://api.github.com/users/motiz88/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2018-08-15T10:30:30Z",
      "updated_at": "2018-08-15T10:41:23Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13404",
        "html_url": "https://github.com/facebook/react/pull/13404",
        "diff_url": "https://github.com/facebook/react/pull/13404.diff",
        "patch_url": "https://github.com/facebook/react/pull/13404.patch"
      },
      "body": "This is the more targeted of two possible approaches to resolve #13400, the other being @gaearon's [suggestion](https://github.com/facebook/react/issues/13400#issuecomment-413048688) of warning on _any_ string value passed to a boolean prop (also subsuming #13372).\r\n\r\nApart from my [other reservation](https://github.com/facebook/react/issues/13400#issuecomment-413056690) regarding a blanket warning on string values, the present approach has the advantage of being applicable to `BOOLEAN`, `BOOLEANISH_STRING` _and_ `OVERLOADED_BOOLEAN` props (see [`DOMProperty.js`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/DOMProperty.js) for definitions). The latter do legitimately need to accept arbitrary string values alongside booleans; if we did go with a blanket warning, it would only make sense for the first two types, so we'd potentially still want a separate check for `\"\"` to accommodate `OVERLOADED_BOOLEAN`.\r\n\r\nThe one wrinkle here (that would also affect the other approach) is that I had to special-case `value` and exclude it from the warning, since it's somewhat oddly modelled as a `BOOLEANISH_STRING`, making legitimate uses of `value=\"\"` warn under my initial implementation. This raises a separate question, though: when is `value` ever legitimately a _boolean_? (`<param>`? That's a bit tenuous; `value` is certainly not [specced](https://html.spec.whatwg.org/multipage/iframe-embed-object.html#attr-param-value) as a boolean there.) However, we can't just remove it from the whitelist, as that would break current behaviour."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13400",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13400/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13400/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13400/events",
      "html_url": "https://github.com/facebook/react/issues/13400",
      "id": 350627761,
      "node_id": "MDU6SXNzdWUzNTA2Mjc3NjE=",
      "number": 13400,
      "title": "Boolean DOM properties coerce empty string to false, contrary to HTML standard",
      "user": {
        "login": "motiz88",
        "id": 2246565,
        "node_id": "MDQ6VXNlcjIyNDY1NjU=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/2246565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/motiz88",
        "html_url": "https://github.com/motiz88",
        "followers_url": "https://api.github.com/users/motiz88/followers",
        "following_url": "https://api.github.com/users/motiz88/following{/other_user}",
        "gists_url": "https://api.github.com/users/motiz88/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/motiz88/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/motiz88/subscriptions",
        "organizations_url": "https://api.github.com/users/motiz88/orgs",
        "repos_url": "https://api.github.com/users/motiz88/repos",
        "events_url": "https://api.github.com/users/motiz88/events{/privacy}",
        "received_events_url": "https://api.github.com/users/motiz88/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2018-08-14T23:04:45Z",
      "updated_at": "2018-08-15T00:22:01Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nThis is in kind of the same space as https://github.com/facebook/react/pull/13372 and is an offshoot of my attempt to better [model React DOM props in Flow](https://github.com/facebook/flow/pull/6727).\r\n\r\n**tl;dr:** Should React warn when the value `\"\"` is passed into a known boolean DOM prop?\r\n\r\n---\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nDepends on interpretation 😅  This is possibly a bug, definitely an inconsistency worth mitigating IMHO.\r\n\r\n**What is the current behavior?**\r\n\r\nReact normalises values supplied to [known DOM boolean props](https://github.com/facebook/react/blob/69e2a0d732e1ca74f6dc5df9d0ddd0bf24373965/packages/react-dom/src/shared/DOMProperty.js#L278-L331) (e.g. `readOnly`) such that passing the empty string `\"\"` (being falsy in JavaScript) results in the corresponding attribute being omitted from the HTML output. However, in [HTML](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attribute), the empty string is a truthy value in this context; it's one of the values that the standard specifically allows in boolean attributes.\r\n\r\nThe above is a potential source of confusion in itself, but React 16's handling of unknown attributes gives rise to the following hypothetical scenario: a new DOM boolean attribute `foobar` is introduced, some people write JSX code that uses it as `foobar=\"\"` (passed through to HTML, truthy), and later React adds `foobar` to its internal whitelist in a minor/patch version and starts processing it as a boolean (JS falsy, omitted from HTML); this would _technically_ be a breaking change for those people.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://codesandbox.io/s/y0pmz9149x\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is definitely a clash of expectations here at the interface of JS and HTML.\r\n\r\n1. Coming from JS, `\"\"` is falsy and treating it as such in a \"boolean\" prop is fine; from this perspective, the current behaviour is justifiable.\r\n2. Coming from HTML, it might not be obvious that React is doing this \"extra\" processing and deviating from what's clearly stated in the HTML spec; from this perspective, the current behaviour is surprising.\r\n\r\nThere probably isn't justification for changing React's actual handling of `\"\"` (not least for fear of breaking code that relies on this long-standing behaviour, see version information below), but perhaps a warning about the ambiguity is warranted, a la #13372?\r\n\r\nNote that a warning won't fully mitigate the worst-case scenario I mentioned above (since we can't warn about a prop that we don't _know_ is a DOM boolean), but at least it would give some signal _after_ the React version update that the code might not be doing the expected thing anymore.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions of React as far back as 0.14 (and probably way older) process whitelisted boolean DOM props the same way."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13396",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13396/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13396/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13396/events",
      "html_url": "https://github.com/facebook/react/issues/13396",
      "id": 350571032,
      "node_id": "MDU6SXNzdWUzNTA1NzEwMzI=",
      "number": 13396,
      "title": "Avoid reconciliation, alternative component interface",
      "user": {
        "login": "andrew-aladev",
        "id": 941925,
        "node_id": "MDQ6VXNlcjk0MTkyNQ==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/941925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrew-aladev",
        "html_url": "https://github.com/andrew-aladev",
        "followers_url": "https://api.github.com/users/andrew-aladev/followers",
        "following_url": "https://api.github.com/users/andrew-aladev/following{/other_user}",
        "gists_url": "https://api.github.com/users/andrew-aladev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/andrew-aladev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/andrew-aladev/subscriptions",
        "organizations_url": "https://api.github.com/users/andrew-aladev/orgs",
        "repos_url": "https://api.github.com/users/andrew-aladev/repos",
        "events_url": "https://api.github.com/users/andrew-aladev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/andrew-aladev/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 40929155,
          "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
          "name": "Type: Question",
          "color": "cc317c",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2018-08-14T19:44:28Z",
      "updated_at": "2018-08-16T13:46:07Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Hello. I want to ask a question about a way to avoid reconciliation process.\r\n\r\nToday I can see the following process:\r\n\r\n1. Component wants to re-render.\r\n2. Component render method provides new virtual dom.\r\n3. Some react diff library tries to find some non-optimal way to morph old virtual dom into new one.\r\n\r\nPlease fix me if I am wrong, I am not familiar with react codebase.\r\n\r\nI can see an information in [docs](https://reactjs.org/docs/reconciliation.html):\r\n\r\n> you don’t have to worry about exactly what changes on every update\r\n\r\nBut your solution has complexity about O(n) or even worse, so user should care about what changes sometimes. When user knows what changed he will be able to provide O(log n) or even O(1) solution.\r\n\r\nFor example I am working with huge data list and I am receiving information from websocket about how to morph my list: append/prepend, remove, swap items, etc. I don't want to render huge component list and run reconciliation process for each mutation. I can tell virtual dom how to morph efficiently.\r\n\r\n![append](https://user-images.githubusercontent.com/941925/44114154-05201870-a013-11e8-9c7a-2e5ed890e372.jpg)\r\n\r\nIs there a way for user to provide morph method? I can imagine some api like:\r\n\r\n```\r\n// render is not defined\r\n\r\nmorph(component) {\r\n  if (...) {\r\n    component.append(<Item />);\r\n  } else {\r\n    (<Item />).prependTo(component.find({ key: '5' }));\r\n  }\r\n}\r\n\r\n```\r\n\r\nDo you have any plans to implement it? Thank you. Please feel free to ask any questions."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13394",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13394/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13394/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13394/events",
      "html_url": "https://github.com/facebook/react/pull/13394",
      "id": 350534959,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4MzYzMTk4",
      "number": 13394,
      "title": "Properly warn on Symbol/Function in SSR, eliminate defaultValue and defaultChecked reserved words, fix some SSR mismatches",
      "user": {
        "login": "nhunzaker",
        "id": 590904,
        "node_id": "MDQ6VXNlcjU5MDkwNA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nhunzaker",
        "html_url": "https://github.com/nhunzaker",
        "followers_url": "https://api.github.com/users/nhunzaker/followers",
        "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
        "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
        "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
        "repos_url": "https://api.github.com/users/nhunzaker/repos",
        "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 15,
      "created_at": "2018-08-14T18:00:32Z",
      "updated_at": "2018-08-18T01:20:39Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13394",
        "html_url": "https://github.com/facebook/react/pull/13394",
        "diff_url": "https://github.com/facebook/react/pull/13394.diff",
        "patch_url": "https://github.com/facebook/react/pull/13394.patch"
      },
      "body": "Updates attribute table based on the latest Symbol stringification work."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13387",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13387/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13387/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13387/events",
      "html_url": "https://github.com/facebook/react/pull/13387",
      "id": 350314867,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4MTk0MzQ1",
      "number": 13387,
      "title": "cloneElement: Added checker for undefined props.",
      "user": {
        "login": "aseem191",
        "id": 18651871,
        "node_id": "MDQ6VXNlcjE4NjUxODcx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/18651871?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aseem191",
        "html_url": "https://github.com/aseem191",
        "followers_url": "https://api.github.com/users/aseem191/followers",
        "following_url": "https://api.github.com/users/aseem191/following{/other_user}",
        "gists_url": "https://api.github.com/users/aseem191/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aseem191/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aseem191/subscriptions",
        "organizations_url": "https://api.github.com/users/aseem191/orgs",
        "repos_url": "https://api.github.com/users/aseem191/repos",
        "events_url": "https://api.github.com/users/aseem191/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aseem191/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-08-14T07:41:24Z",
      "updated_at": "2018-08-17T10:13:15Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13387",
        "html_url": "https://github.com/facebook/react/pull/13387",
        "diff_url": "https://github.com/facebook/react/pull/13387.diff",
        "patch_url": "https://github.com/facebook/react/pull/13387.patch"
      },
      "body": "This PR is an addition/feature that responds to https://github.com/facebook/react/issues/13381. It causes cloneElement to automatically skip past props whose values are undefined.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13381",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13381/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13381/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13381/events",
      "html_url": "https://github.com/facebook/react/issues/13381",
      "id": 350010652,
      "node_id": "MDU6SXNzdWUzNTAwMTA2NTI=",
      "number": 13381,
      "title": "React.cloneElement cannot remove existing props",
      "user": {
        "login": "tokland",
        "id": 24643,
        "node_id": "MDQ6VXNlcjI0NjQz",
        "avatar_url": "https://avatars2.githubusercontent.com/u/24643?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tokland",
        "html_url": "https://github.com/tokland",
        "followers_url": "https://api.github.com/users/tokland/followers",
        "following_url": "https://api.github.com/users/tokland/following{/other_user}",
        "gists_url": "https://api.github.com/users/tokland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tokland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tokland/subscriptions",
        "organizations_url": "https://api.github.com/users/tokland/orgs",
        "repos_url": "https://api.github.com/users/tokland/repos",
        "events_url": "https://api.github.com/users/tokland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tokland/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 139653724,
          "node_id": "MDU6TGFiZWwxMzk2NTM3MjQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
          "name": "Component: Core Utilities",
          "color": "c5def5",
          "default": false
        },
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2018-08-13T12:34:23Z",
      "updated_at": "2018-08-18T09:05:40Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA feature.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen an element is cloned with [React.cloneElement](https://reactjs.org/docs/react-api.html#cloneelement), it's possible to add new props or modify existing ones, but not to remove existing props. [Relevant code](https://github.com/facebook/react/blob/master/packages/react/src/ReactElement.js#L333).\r\n\r\nExample of how it works right now:\r\n\r\n```\r\nconst element = React.createElement(\"a\", {href: \"http://github.com\"});\r\nconst newElement = React.cloneElement(element, {href: undefined});\r\nconsole.log(newElement.props); // {href: undefined}\r\n```\r\n\r\n**What is the desired behavior?**\r\n\r\nIt would be great to add some way to remove props (passing `undefined` as value?):\r\n\r\n```\r\nconst element = React.createElement(\"a\", {href: \"http://github.com\"});\r\nconst newElement = React.cloneElement(element, {href: undefined});\r\nconsole.log(newElement.props); // {}\r\n```\r\n\r\nI guess I could use directly `React.createElement` but, AFAIK, I'll have also to worry about special attributes like `key` and `ref`. I'd rather not mess with internals.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI think it has worked this way in all React versions.\r\n\r\n**What's your use case?**\r\n\r\nI am applying a map transformation of elements recursively and I need to remove some virtual props before passing the elements for React to render. A contrived example here: https://repl.it/@tokland/ReactRemovePropsFromClonedComponent (console shows `React does not recognize the unknownProp prop on a DOM element`, I want to avoid that)."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13379",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13379/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13379/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13379/events",
      "html_url": "https://github.com/facebook/react/pull/13379",
      "id": 349913997,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA3ODg5MzUz",
      "number": 13379,
      "title": "[WIP] Add SSR description in Doc",
      "user": {
        "login": "ryota-murakami",
        "id": 5501268,
        "node_id": "MDQ6VXNlcjU1MDEyNjg=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/5501268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryota-murakami",
        "html_url": "https://github.com/ryota-murakami",
        "followers_url": "https://api.github.com/users/ryota-murakami/followers",
        "following_url": "https://api.github.com/users/ryota-murakami/following{/other_user}",
        "gists_url": "https://api.github.com/users/ryota-murakami/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ryota-murakami/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ryota-murakami/subscriptions",
        "organizations_url": "https://api.github.com/users/ryota-murakami/orgs",
        "repos_url": "https://api.github.com/users/ryota-murakami/repos",
        "events_url": "https://api.github.com/users/ryota-murakami/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ryota-murakami/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2018-08-13T07:20:25Z",
      "updated_at": "2018-08-18T10:37:24Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13379",
        "html_url": "https://github.com/facebook/react/pull/13379",
        "diff_url": "https://github.com/facebook/react/pull/13379.diff",
        "patch_url": "https://github.com/facebook/react/pull/13379.patch"
      },
      "body": "<img width=\"550\" alt=\"screen shot 2018-08-13 at 15 25 32\" src=\"https://user-images.githubusercontent.com/5501268/44016457-fe816608-9f0f-11e8-8b89-5b7111e0fd36.png\">\r\n\r\n# Why\r\nSSR document does not exist in the official document right now.\r\n\r\nThis means that you can't find a way 「How to SSR with React」from the official document searchbox,\r\nand you have to rely on an external blog such as Medium.\r\nExternal blog is pretty good, but I think more ideal if there is the 「How to SSR with React」.\r\n- Doesn't contain other popular library settings.\r\n- You don't have to confirm is the article based on latest version React.\r\n\r\n# What am I going to do?\r\n\r\n- [ ] Write「How to SSR with React」Doc among with [SSR Fixtures](https://github.com/facebook/react/tree/master/fixtures/ssr)"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13360",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13360/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13360/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13360/events",
      "html_url": "https://github.com/facebook/react/pull/13360",
      "id": 349433084,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA3NTQ5MTIx",
      "number": 13360,
      "title": "Enable warnings for the defaultValue prop",
      "user": {
        "login": "raunofreiberg",
        "id": 23662329,
        "node_id": "MDQ6VXNlcjIzNjYyMzI5",
        "avatar_url": "https://avatars1.githubusercontent.com/u/23662329?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/raunofreiberg",
        "html_url": "https://github.com/raunofreiberg",
        "followers_url": "https://api.github.com/users/raunofreiberg/followers",
        "following_url": "https://api.github.com/users/raunofreiberg/following{/other_user}",
        "gists_url": "https://api.github.com/users/raunofreiberg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/raunofreiberg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/raunofreiberg/subscriptions",
        "organizations_url": "https://api.github.com/users/raunofreiberg/orgs",
        "repos_url": "https://api.github.com/users/raunofreiberg/repos",
        "events_url": "https://api.github.com/users/raunofreiberg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/raunofreiberg/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-08-10T09:02:35Z",
      "updated_at": "2018-08-10T20:49:19Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13360",
        "html_url": "https://github.com/facebook/react/pull/13360",
        "diff_url": "https://github.com/facebook/react/pull/13360.diff",
        "patch_url": "https://github.com/facebook/react/pull/13360.patch"
      },
      "body": "Somewhat related to #11734.\r\n\r\nI started off with adding warnings for assigning symbols and functions to the defaultValue prop (ultimately resolving TODOs in `ReactDOMInput-test.js`), then quickly realized that there are a few cases that don't currently warn, so I decided to go ahead and cover those as well. For i.e, assigning a boolean to defaultValue currently does not warn, but could, in order to prevent potential pitfalls or misconceptions."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13359",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13359/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13359/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13359/events",
      "html_url": "https://github.com/facebook/react/issues/13359",
      "id": 349356058,
      "node_id": "MDU6SXNzdWUzNDkzNTYwNTg=",
      "number": 13359,
      "title": "Might be time to update some of our package READMEs",
      "user": {
        "login": "sophiebits",
        "id": 6820,
        "node_id": "MDQ6VXNlcjY4MjA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sophiebits",
        "html_url": "https://github.com/sophiebits",
        "followers_url": "https://api.github.com/users/sophiebits/followers",
        "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
        "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
        "organizations_url": "https://api.github.com/users/sophiebits/orgs",
        "repos_url": "https://api.github.com/users/sophiebits/repos",
        "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sophiebits/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
  
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-08-10T02:38:53Z",
      "updated_at": "2018-08-10T02:38:53Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "> An npm package to get you immediate access to React, without also requiring the JSX transformer. This is especially useful for cases where you want to browserify your module using React.\r\n\r\nhttps://github.com/facebook/react/blob/v16.4.2/packages/react/README.md"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13357",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13357/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13357/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13357/events",
      "html_url": "https://github.com/facebook/react/pull/13357",
      "id": 349211518,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA3MzgxNjQ1",
      "number": 13357,
      "title": "Failing test for removing nodes with dupe keys",
      "user": {
        "login": "sophiebits",
        "id": 6820,
        "node_id": "MDQ6VXNlcjY4MjA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sophiebits",
        "html_url": "https://github.com/sophiebits",
        "followers_url": "https://api.github.com/users/sophiebits/followers",
        "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
        "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
        "organizations_url": "https://api.github.com/users/sophiebits/orgs",
        "repos_url": "https://api.github.com/users/sophiebits/repos",
        "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sophiebits/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2018-08-09T17:00:05Z",
      "updated_at": "2018-08-09T19:57:22Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13357",
        "html_url": "https://github.com/facebook/react/pull/13357",
        "diff_url": "https://github.com/facebook/react/pull/13357.diff",
        "patch_url": "https://github.com/facebook/react/pull/13357.patch"
      },
      "body": "We don't really support duplicate keys, but the fact that we don't means you can get totally inconsistent output -- where your component thinks it is rendering one thing but is actually rendering another. The simplest manifestation of this is:\n\n```js\nfunction Foo(props) {\n  if (props.step === 1) {\n    return <>\n      <div key=\"bar\" />\n      <div key=\"bar\" />\n    </>;\n  } else {\n    return <>\n      <div key=\"baz\" />\n    </>;\n  }\n}\n```\n\nIf you render step=1 then step=2, you'll end up with a DOM containing `bar` then `baz` even though that's \"logically impossible\".\n\nPeople who see a dupe key warning in DEV should heed it, but this is still pretty odd behavior (that can be caused by fluke unreliable server data), so maybe we can do better?"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13356",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13356/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13356/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13356/events",
      "html_url": "https://github.com/facebook/react/pull/13356",
      "id": 349188993,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA3MzY0MjIy",
      "number": 13356,
      "title": "Replace deprecated Rollup option 'legacy' with custom plugin.",
      "user": {
        "login": "elas7",
        "id": 7537033,
        "node_id": "MDQ6VXNlcjc1MzcwMzM=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/7537033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elas7",
        "html_url": "https://github.com/elas7",
        "followers_url": "https://api.github.com/users/elas7/followers",
        "following_url": "https://api.github.com/users/elas7/following{/other_user}",
        "gists_url": "https://api.github.com/users/elas7/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/elas7/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/elas7/subscriptions",
        "organizations_url": "https://api.github.com/users/elas7/orgs",
        "repos_url": "https://api.github.com/users/elas7/repos",
        "events_url": "https://api.github.com/users/elas7/events{/privacy}",
        "received_events_url": "https://api.github.com/users/elas7/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2018-08-09T15:54:26Z",
      "updated_at": "2018-08-12T16:38:36Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13356",
        "html_url": "https://github.com/facebook/react/pull/13356",
        "diff_url": "https://github.com/facebook/react/pull/13356.diff",
        "patch_url": "https://github.com/facebook/react/pull/13356.patch"
      },
      "body": "The `legacy` option was added to the Rollup build system (for www builds) in #11469 because the internal transforms break on getters. As of version 0.60.0 of Rollup, `legacy` support is removed ([source](https://github.com/rollup/rollup/pull/2141), [changelog](https://github.com/rollup/rollup/blob/master/CHANGELOG.md#0600)). This PR adds a custom Rollup plugin to replicate the `legacy` behaviour.\r\n\r\nNote that the `legacy` option performed several transformations to support IE8. The custom Rollup plugin only replicates the replacement of getters ([original code here](https://github.com/rollup/rollup/blob/349677ceee9d4bbccb5b2f72e653270cb2b0ce51/src/ast/variables/NamespaceVariable.ts#L63)).\r\n\r\nAlso note that getters are only generated in a very specific case by Rollup. That is, when doing namespace imports (`import * as name from 'origin'`) and one of the imported variables is reassigned at some point (an example of this can be found in the [old Rollup tests](https://github.com/rollup/rollup/tree/349677ceee9d4bbccb5b2f72e653270cb2b0ce51/test/form/samples/legacy-getter)). At this time, the only getter generated by React code is `ReactDOMEventListener._enabled`."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13355",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13355/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13355/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13355/events",
      "html_url": "https://github.com/facebook/react/issues/13355",
      "id": 349183126,
      "node_id": "MDU6SXNzdWUzNDkxODMxMjY=",
      "number": 13355,
      "title": "Ability to use return value of React.Children.map with React.Children.only",
      "user": {
        "login": "Saruto",
        "id": 6063483,
        "node_id": "MDQ6VXNlcjYwNjM0ODM=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/6063483?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Saruto",
        "html_url": "https://github.com/Saruto",
        "followers_url": "https://api.github.com/users/Saruto/followers",
        "following_url": "https://api.github.com/users/Saruto/following{/other_user}",
        "gists_url": "https://api.github.com/users/Saruto/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Saruto/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Saruto/subscriptions",
        "organizations_url": "https://api.github.com/users/Saruto/orgs",
        "repos_url": "https://api.github.com/users/Saruto/repos",
        "events_url": "https://api.github.com/users/Saruto/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Saruto/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 139653724,
          "node_id": "MDU6TGFiZWwxMzk2NTM3MjQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
          "name": "Component: Core Utilities",
          "color": "c5def5",
          "default": false
        },
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-08-09T15:39:29Z",
      "updated_at": "2018-08-22T05:47:23Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "As stated in the docs and shown in #4410, the return value of `React.Children.map` is incompatible with the `React.Children.only` function, and will return with the error message:\r\n> Invariant Violation: Invariant Violation: React.Children.only expected to receive a single React element child.\r\n\r\nif used. \r\n\r\nThis incompatibility causes some fairly annoying restrictions, however. From what I understand, this means that you can't edit the properties of a component's children at runtime if they contain any component that requires a single child. (eg. you can't dynamically set the disabled prop of a child `TouchableNativeFeedback` component in the parent).\r\n\r\nI believe this is due to the type differences between the `this.props.children` parameter and the `React.Children.map` return value, the former being a valid element and the latter not (see #4424 and https://github.com/reactjs/reactjs.org/issues/87). \r\n\r\nI'd like to make a request to have the return type of `React.Children.map` be the same as the type of `this.props.children`, which will fix these quirks and be much more intuitive. A separate static function that converts the return type of `React.Children.map` to the same type as `this.props.children` would also solve the issue. It feels like some sort of fix is in order, since it's a broad and strange restriction on the components you can use."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13347",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13347/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13347/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13347/events",
      "html_url": "https://github.com/facebook/react/pull/13347",
      "id": 348841323,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjA3MDk3NjM2",
      "number": 13347,
      "title": "Add failing tests for resilience to Google Translate",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2018-08-08T18:30:26Z",
      "updated_at": "2018-08-10T13:15:06Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/13347",
        "html_url": "https://github.com/facebook/react/pull/13347",
        "diff_url": "https://github.com/facebook/react/pull/13347.diff",
        "patch_url": "https://github.com/facebook/react/pull/13347.patch"
      },
      "body": "While https://github.com/facebook/react/pull/13341 didn't work out I figured I'd share the test cases I used with it. The test code is kinda wonky — it's adapted from our text node permutation tests, but with some twists to simulate what a mutation *should* do in each case.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13342",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13342/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13342/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13342/events",
      "html_url": "https://github.com/facebook/react/issues/13342",
      "id": 348420896,
      "node_id": "MDU6SXNzdWUzNDg0MjA4OTY=",
      "number": 13342,
      "title": "RFC: Omit end tags when possible in ReactDOMServerRenderer",
      "user": {
        "login": "tvler",
        "id": 4934193,
        "node_id": "MDQ6VXNlcjQ5MzQxOTM=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/4934193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tvler",
        "html_url": "https://github.com/tvler",
        "followers_url": "https://api.github.com/users/tvler/followers",
        "following_url": "https://api.github.com/users/tvler/following{/other_user}",
        "gists_url": "https://api.github.com/users/tvler/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tvler/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tvler/subscriptions",
        "organizations_url": "https://api.github.com/users/tvler/orgs",
        "repos_url": "https://api.github.com/users/tvler/repos",
        "events_url": "https://api.github.com/users/tvler/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tvler/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710332294,
          "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
          "name": "Component: Server Rendering",
          "color": "d4c5f9",
          "default": false
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
  
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-08-07T17:41:53Z",
      "updated_at": "2018-08-07T18:00:15Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "# Background\r\n\r\nThere are a lot of instances defined in the HTML spec where end tags can be omitted while still maintaining valid markup.\r\n\r\nSome examples:\r\n\r\n> An li element’s end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.\r\n\r\n> A p element’s end tag may be omitted if the p element is immediately followed by an address, article, aside, blockquote, details, div, dl, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hr, main, nav, ol, p, pre, section, table, or ul element, or if there is no more content in the parent element and the parent element is an HTML element that is not an a, audio, del, ins, map, noscript, or video element, or an autonomous custom element.\r\n\r\nYou can see all of them over at https://www.w3.org/TR/html5/syntax.html#optional-tags\r\n\r\nUtilizing these rules, I think it may be possible to reduce the amount of html needed to be initially downloaded by the user for serverside rendering.\r\n\r\nDepending on what's being rendered, there could be a significant decrease in html size. Here's an example I pulled from the W3C of a table element utilizing these rules. The difference is 464 bytes compared to 629 – about a **26% decrease** in size.\r\n\r\n```html\r\n<table>\r\n<caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)\r\n<colgroup><col><col><col>\r\n<thead>\r\n<tr>\r\n  <th>Function\r\n  <th>Control Unit\r\n  <th>Central Station\r\n<tbody>\r\n<tr>\r\n  <td>Headlights\r\n  <td>✔\r\n  <td>✔\r\n<tr>\r\n  <td>Interior Lights\r\n  <td>✔\r\n  <td>✔\r\n<tr>\r\n  <td>Electric locomotive operating sounds\r\n  <td>✔\r\n  <td>✔\r\n<tr>\r\n  <td>Engineer’s cab lighting\r\n  <td>\r\n  <td>✔\r\n<tr>\r\n  <td>Station Announcements - Swiss\r\n  <td>\r\n  <td>✔\r\n</table>\r\n```\r\n\r\n# Caveats\r\n\r\n- Even though these rules are in the spec, they still feel like quirks to me. There probably are some browser-to-browser differences in how these are handled.\r\n- Should this even be handled by React? I could see a babel plugin or something like that being a good fit for an optimization like this too.\r\n\r\n# Possible roadmap\r\n\r\n- Research what end tags would be stable to omit (https://www.w3.org/TR/html5/syntax.html#optional-tags)\r\n- Roll out this optimization for a subset of tags\r\n- Gauge real-world load time improvements and continue adding omission cases if everything is looking good"
    }
  ];